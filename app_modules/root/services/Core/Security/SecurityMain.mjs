/**
 * @class Security
 * @description Tool encapsulating all security logic and management for application
 * @version 0.1
 * @author DRAW
 */
import Tool from "../../ToolAbstract.mjs";
import Config from "./SecurityConfig.json" with {type: "json"};
/////////////////////////////////////////////////////////////////////////////////////////////////
export default class Security extends Tool{

    constructor(args) {
        super();
        this.Console = args[0];
        this.Library = args[1];
        this.Hardware = args[2];
        this.SecurityTools = this.Library.request(["encryption","hasher"])
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    async init(){
        
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    encrypt(bytes){

    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    decrypt(bytes){

    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    concat(ciphertext, iv, auth){

    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    deConCat(ciphertext){

    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    randomToken(){

    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    handle(commandDat){
        
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////
    async deriveKey(raw){
        return await this.SecurityTools.hasher.hash(raw, {
            type: Config.ArgonParameters.type,
            hashLength: Config.ArgonParameters.hashLength,
            salt: Buffer.from(await this.Hardware.getMotherboardSerial()),
            timeCost: Config.ArgonParameters.timeCost,
            memoryCost: Config.ArgonParameters.memoryCost,
            parallelism: Config.ArgonParameters.parallelism,
            raw: Config.ArgonParameters.raw,

        });
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
}
/////////////////////////////////////////////////////////////////////////////////////////////////